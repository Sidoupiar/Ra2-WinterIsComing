; 定制连接和部署行为
[工程设置]
; 在生成的 rules , art , sound , ai 文件的末尾添加多少个空行
输出文件末尾空行数量=4
; 是否启用自动注册
; 如果你关闭了它 , 那么【X-基础设置】中的 "W-默认注册.ini" 文件就没用了 , 你需要在 "自定义设置" 中手动创建各个注册表代码片段 , 并手动维护它们
启用自动注册=yes
; 如果一个文件是只读的 , 那么在部署时 , 它只能被程序复制而不能删除/覆盖
; 如果删除/覆盖一个只读文件 , 那么程序的行为会被系统组织 , 并会终止运行
; 当然你可以手动复制和管理这些文件 , 这里只是提供了一个自动化的途径
; 如果你设置为 yes , 那么只会移除实际部署的文件的只读属性
移除只读属性=yes
; 用于确定输出的 ini 是否进行随机排序 , 包括代码片段和代码片段里面的项 , 不影响注册表
; 片段 = 所有代码片段随机排序
; 内容 = 代码片段内部的代码随机排序
随机排序_片段=yes
随机排序_内容=yes
; 是否为完整部署
; 对于有很多文件的 MOD 来说 , 每次部署都大量复制文件其实不太行 , 所以有了这个功能
; 如果 yes , 则会清除掉上次部署的所有文件并重新复制工程内的文件
; 如果 no , 则只会复制缺少的文件 , 有变化的文件 , 以及 rules , art , sound 和 ai 这四个文件
;           且【不会删除上次部署中存在 , 但这次部署中已不存在的文件】
;           且【不会删除 "部署时额外删除的文件" 和 "部署时额外删除的文件夹" 中指定的文件或文件夹】
完整部署=no
; 是否在控制台显示在连接过程中实际上进行了输出的文件名称 (比如生成的图标之类的 , 不包括 rules , art , sound 和 ai)
; 是否在控制台显示在部署过程中实际上进行了复制和替换的文件名称
输出实际生成的文件名称=no
输出实际部署的文件名称=yes

; 用于确定当前正在部署的版本的名称 , 详见开发文档 "版本" 部分
;版本=Release  ; 发布的版本
版本=Debug    ; 调试使用的版本
;版本=DouQQ    ; AI 斗蛐蛐版本

; 用于开关关联校验 , 用于开关关联校验是否区分大小写 , 此外 , 还可以分别开关各个种类的提示
; 它们的默认值全都是 yes
启用关联校验=yes
关联校验_忽略提示的代码片段也进行校验=yes
关联校验_区分大小写=yes
关联校验_提示不存在_护甲=yes
关联校验_提示不存在_武器=yes
关联校验_提示不存在_弹头=yes
关联校验_提示不存在_投射物=yes
关联校验_提示不存在_图像=yes
关联校验_提示不存在_其他=yes
关联校验_提示未使用_护甲=yes
关联校验_提示未使用_武器=yes
关联校验_提示未使用_弹头=yes
关联校验_提示未使用_投射物=yes
关联校验_提示未使用_图像=yes
关联校验_提示未使用_其他=yes

; 自动创建图标设置
; 在这里设置自动创建图标的相关默认值 , 如果这里设置了默认值 , 那么如果单位中使用的值和这里的一样 , 那么单位中的值可以不写
; 详细说明请见【开发文档】
创建图标_文件设置=图标底板,升级标识,文本背景,外层效果,边框效果
创建图标_字体设置=Zfull-GB,7,0,2
创建图标_后缀设置=_i,_u
创建图标_位置设置=模板素材文件,单位图标素材文件

; 选择是否真的创建图标文件 , 默认 yes
; 此设置在部分情况下可以节约电脑性能 , 并在需要绘制的图片很多时可以有效提高运行速度
; 如果选择不实际生成图标文件 , 则在部署时程序会认为这些图标文件已经被移除 , 敬请注意
; yes = 真实地创建出 pcx 文件
; no  = 则只是生成相关的 ini 代码 , 已经创建的 pcx 图标 (仅位于【输出结果】文件夹中的部分) , 会在再次运行程序的时候被删除
创建图标文件=no

; 连接日志文件
; 可以把运行 "连接和部署" 功能的过程中产生的所有输出 (载入工程后的) 都输出到【连接日志】文件夹下 (没有此文件夹时会自动创建)
; yes = 输出 , no = 不输出 , 默认 no
连接日志=no
; 输出日志时是否覆盖以往的日志 (只覆盖 "最后运行.log") , 如果不覆盖 , 则会给 "最后运行.log" 按时间重命名 , 之后才开始输出
; yes = 覆盖 , no = 不覆盖 , 默认 no
连接日志覆盖=no

; 自定义匹配型自动值
; 是否允许在一条属性中使用多个【自定义匹配型自动值】(使用逗号 "," 分隔)
; yes = 允许 , no = 不允许 , 默认 no
允许多项自定义匹配型自动值=no

[单位图标排序]
0=A-建筑
1=H-超武
2=B-防御
3=C-步兵
4=D-载具
5=F-空军-滞空
6=G-空军-机场
7=E-舰船

; 由于存在部分代码无法进行属性的随机排序 , 因此添加了这个功能
; 在列表中添加代码片段的标题 , 则输出到这个代码片段时则不会随机排序
; 仅影响当前这个代码片段 , 对于代码片段在文件中的位置依然是随机的
; 阵营和国家不支持这个功能
[强制禁用随机排序的单位]
0=Colors
1=ColorAdd
2=VariableNames
3=Tiberiums
4=GenericPrerequisites
5=ArmorTypes
6=WeaponTypes
7=MouseCursors
8=AITargetTypes
9=AIScriptsList
10=CSFList
11=DebugTextList
12=RandomSuperWeaponList
13=DataPackTypes
14=MarkTypes
15=DigitalDisplayTypes

; 自定义匹配型自动值的定义
[自定义匹配型自动值列表]
SITextCode=102345067

; 自动护甲 , 定义护甲标签的名称
[护甲标签列表-名称]
; Types=Infantry,Unit
; Thick=Light,Heavy

; 自动护甲 , 定义护甲标签的默认比例
[护甲标签列表-默认比例]
; Types=100%,200%
; Thick=P100%,50%

; 自动护甲 , 额外定义单独的护甲标签
[护甲标签列表-额外]
; DoDamage=200%
; DoDefense=50%

; 自定义连接器专用代码
; 如果使用了自定义的专用代码标识 (用作中继属性) , 并且想让连接器正确校验专用代码标识的话
; 那么那些自定义的专用代码标识就需要在这里注册
; 注意事项 :
; 1. 这些标识会被连接器强制认为以 ## 开头 , 因此这里不需要写 ##
; 2. 检测时连接器会以 . 进行分割并分段检测 , 因此不需要填写完整属性 , 只需要填写开头的一段
; 栗子 :
; 自定义的属性 (原始) : ##DataCost.List = 1,2,3
; 在这里注册时 : n=DataCost
; 说明 : 开头的 ## 不需要填写 , "." 符号后面的为其他的分段 , 也不需要填写
[自定义连接器专用代码列表]
0=Versus    ; 弹头的护甲映射模板使用的中继属性
1=Data0     ; 交换属性的中继属性

; 部署时额外删除的文件
[部署时额外删除的文件]

; 部署时额外删除的文件夹 , 文件夹内的文件和子文件夹也会被删除
[部署时额外删除的文件夹]
;0=Client
;1=debug
;2=Saved Games
;3=Screenshots